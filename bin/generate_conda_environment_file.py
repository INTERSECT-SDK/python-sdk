"""
This file generates a Conda environment.yml from pyproject.toml

Usage: conda search | cut -d ' ' -f 1 | uniq | bin/generate_miniconda_environment_file.py > environment.yml

Or, if you have a pre-existing list of conda dependencies: bin/generate_miniconda_environment_file.py < dependencies.txt > environment.yml

(prints to stdout)
"""

import re
from pathlib import Path
from sys import stderr, stdin

try:
    # python >= 3.11
    import tomllib as toml
except ImportError:
    # python < 3.11
    import tomli as toml

import yaml

conda_deps = set()
for line in stdin:
    conda_deps.add(line.strip())

BASE_DIR = Path(__file__).absolute().parents[1]

with open(BASE_DIR / "pyproject.toml", "rb") as f:
    pyproject = toml.load(f)

name = pyproject["project"]["name"]
requires_python = pyproject["project"]["requires-python"]
dependencies = pyproject["project"]["dependencies"]
optionals = [
    dependency
    for group in pyproject["project"]["optional-dependencies"].values()
    for dependency in group
]
dev_dependencies = [
    dependency
    for group in pyproject["tool"]["pdm"]["dev-dependencies"].values()
    for dependency in group
]

conda_installs = [f"python{requires_python}", "pip"]
pip_installs = []

for iterable in [dependencies, optionals, dev_dependencies]:
    for item in iterable:
        try:
            idx = re.search(r"[^a-zA-Z0-9_.-]", item).start()
            dependency = item[:idx]
        except AttributeError:
            print(f"WARNING: dependency '{item}' has no version constraints", file=stderr)
            dependency = item
        if dependency in conda_deps:
            conda_installs.append(item)
        else:
            pip_installs.append(item)

pip_installs.append("-e .")

conda_environment = {
    "name": name,
    "dependencies": conda_installs
    + [
        {"pip": pip_installs},
    ],
}

print(
    f"""# This file was autogenerated from the dependency list in pyproject.toml.

# Use this file to create a conda environment for developing the intersect
# package. Below are some useful conda environment commands.
#
# Create the environment:      conda env create --file environment.yml
# Activate the environment:    conda activate intersect
# Deactivate the environment:  conda deactivate
# Remove the environment:      conda env remove --name intersect

{yaml.dump(conda_environment)}"""
)
